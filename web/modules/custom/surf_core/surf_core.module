<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_cache_flush().
 */
function surf_core_cache_flush() {
  $entity_field_manager = \Drupal::service('entity_field.manager');
  // @see https://www.drupal.org/project/drupal/issues/3129179
  // This could also be moved to a hook after a field is deleted.
  if (method_exists(\Drupal\Core\Entity\EntityFieldManager::class, 'rebuildBundleFieldMap')) {
    $entity_field_manager->rebuildBundleFieldMap();
  }
}

/**
 * Alter the information provided in \Drupal\webform\Annotation\WebformHandler.
 *
 * @param array $handlers
 *   The array of webform handlers, keyed on the machine-readable handler name.
 */
function surf_core_webform_handler_info_alter(array &$handlers) {
  if (isset($handlers['user_registration'])) {
    $handlers['user_registration']['class'] =  \Drupal\surf_core\Plugin\WebformHandler\UserRegistrationWebformHandler::class;
  }
}

/**
 * Preprocess Paragraph
 * Implements theme_preprocess_paragraph().
 * @param $variables
 * @return void
 */
function surf_main_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $behaviorSettings = $paragraph->getAllBehaviorSettings();

  // Set style option behaviors as a logical template variable.
  if (!empty($behaviorSettings['style_options'])) {
    foreach ($behaviorSettings['style_options'] as $key => $style) {
      $variables['style_options'][$key] = $style['property'];
    }
  }
}

/**
 * Implement hook_form_alter().
 */
function surf_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'search_api_form') {
    if (isset($form['keyword'])) {
      $custom_id = 'search-api-keyword';
      $form['keyword']['#id'] = $custom_id;
    }
  }
}
