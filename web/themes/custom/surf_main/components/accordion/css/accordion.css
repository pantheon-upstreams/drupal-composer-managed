/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Settings - Breakpoints
 * - 01 - Mapping
 */
/*------------------------------------*\
  01 - Mapping
\*------------------------------------*/
/**
 * Mixins - Breakpoints
 * - 01 - Breakpoints
 */
/*------------------------------------*\
  01 - Breakpoints
\*------------------------------------*/
.c-accordion__title {
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-body);
  font-size: var(--font-size-body-medium);
  line-height: var(--font-line-height-body-medium);
  color: var(--color-surf--dark-black);
  margin: 0;
}

.c-accordion__trigger {
  color: var(--color-surf--dark-black);
  border-style: none;
  border-bottom: solid 1px var(--color-surf--grey);
  background: none;
  display: -webkit-box;
  display: flex;
  -webkit-box-align: center;
          align-items: center;
  -webkit-box-pack: start;
          justify-content: flex-start;
  margin: 0;
  padding: 0.5rem 1rem;
  position: relative;
  text-align: left;
  border-radius: 0;
  cursor: pointer;
  width: 100%;
}
@media (min-width: 768px) {
  .c-accordion__trigger {
    padding: 1.25rem 0.75rem;
  }
}
.c-accordion__trigger:focus, .c-accordion__trigger:hover {
  text-decoration: underline;
  color: var(--color-surf--dark-grey);
}
.c-accordion__trigger:focus .c-accordion__icon, .c-accordion__trigger:hover .c-accordion__icon {
  background-color: var(--color-surf--kelly-green);
}
.c-accordion__trigger[aria-expanded=true] .c-accordion__icon {
  -webkit-mask-image: url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2228%22%20height%3D%2228%22%20fill%3D%22none%22%3E%3Cpath%20stroke%3D%22%2300492C%22%20stroke-width%3D%221.5%22%20d%3D%22M6.223%2014h15.555%22%2F%3E%3C%2Fsvg%3E");
          mask-image: url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2228%22%20height%3D%2228%22%20fill%3D%22none%22%3E%3Cpath%20stroke%3D%22%2300492C%22%20stroke-width%3D%221.5%22%20d%3D%22M6.223%2014h15.555%22%2F%3E%3C%2Fsvg%3E");
}

.c-accordion__icon {
  background-color: var(--color-surf--forest);
  -webkit-mask-image: url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2228%22%20height%3D%2228%22%20fill%3D%22none%22%3E%3Cpath%20stroke%3D%22%2300492C%22%20stroke-width%3D%221.5%22%20d%3D%22M14%205.871v16.258M22.129%2014H5.87%22%2F%3E%3C%2Fsvg%3E");
          mask-image: url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2228%22%20height%3D%2228%22%20fill%3D%22none%22%3E%3Cpath%20stroke%3D%22%2300492C%22%20stroke-width%3D%221.5%22%20d%3D%22M14%205.871v16.258M22.129%2014H5.87%22%2F%3E%3C%2Fsvg%3E");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
  width: 1.75rem;
  height: 1.75rem;
  display: inline-block;
  margin: 0 0.75rem 0 0;
  -webkit-box-flex: 0;
          flex: none;
}

.c-accordion__title-wrapper {
  display: -webkit-box;
  display: flex;
  -webkit-box-align: center;
          align-items: center;
}

.c-accordion__title-text {
  -webkit-box-flex: 1;
          flex: 1;
  font-weight: var(--font-weight-bold);
  text-transform: none;
  width: 100%;
}

.c-accordion__panel {
  border-bottom: solid 1px var(--color-surf--grey);
  max-height: 100vh;
  -webkit-transition: max-height 350ms cubic-bezier(0.4, 0, 0.2, 1);
  -o-transition: max-height 350ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: max-height 350ms cubic-bezier(0.4, 0, 0.2, 1);
}
.c-accordion__panel[hidden] {
  border: none;
  display: block;
  max-height: 0;
  overflow: hidden;
  -webkit-transition: max-height 250ms cubic-bezier(0.4, 0, 0.2, 1);
  -o-transition: max-height 250ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: max-height 250ms cubic-bezier(0.4, 0, 0.2, 1);
}
.c-accordion__panel p {
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-body);
  font-size: var(--font-size-body-medium);
  line-height: var(--font-line-height-body-medium);
}
.c-accordion__panel p:first-child {
  margin-top: 0;
}
.c-accordion__panel p:last-child {
  margin-bottom: 0;
}

.c-accordion__panel-inner-wrapper {
  padding: 1.75rem;
}
@media (min-width: 768px) {
  .c-accordion__panel-inner-wrapper {
    padding: 3rem;
  }
}