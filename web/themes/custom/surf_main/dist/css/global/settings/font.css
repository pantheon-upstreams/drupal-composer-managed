/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Settings - Breakpoints
 * - 01 - Mapping
 */
/*------------------------------------*\
  01 - Mapping
\*------------------------------------*/
/**
 * Mixins - Breakpoints
 * - 01 - Breakpoints
 */
/*------------------------------------*\
  01 - Breakpoints
\*------------------------------------*/
:root {
  /*
    Font: Families
  */
  --font-family-mono: monospace;
  --font-family-sans: "ballinger", sans-serif;
  --font-family-condensed: "ballinger-condensed", sans-serif;
  --font-family-serif: "recent-grotesk", sans-serif;
  --font-family-body: var(--font-family-sans);
  --font-family-heading: var(--font-family-serif);
  --font-family-interface: var(--font-family-sans);
  /*
    Font: Sizes

    By default, all font-size declarations will be converted to rems
    via postCSS. Declerations for other properties will maintain their px units.
  */
  /*
    Font: Weight
  */
  --font-weight-thin: 100;
  --font-weight-light: 300;
  --font-weight-regular: 400;
  --font-weight-book: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;
  /*
    Font: Letter Spacing;
  */
  --font-letter-spacing-normal: 0;
  --font-letter-spacing-wide: 0.09375em;
  --font-letter-spacing-wider: 0.125em;
  --font-size-heading-one: 48px;
  --font-size-heading-one-alt: 24px;
  --font-size-heading-two: 40px;
  --font-size-heading-two-alt: 32px;
  --font-size-heading-three: 36px;
  --font-size-heading-four: 28px;
  --font-size-heading-five: 24px;
  --font-size-heading-six: 20px;
  --font-size-body-jumbo: 18px;
  --font-size-body-x-large: 18px;
  --font-size-body-large: 16px;
  --font-size-body-medium: 16px;
  --font-size-body-small: 16px;
  --font-size-body-x-small: 14px;
  --font-size-label-x-large: 22px;
  --font-size-label-large: 22px;
  --font-size-label-medium: 22px;
  --font-size-label-small: 20px;
  --font-size-label-peewee: 16px;
  --font-line-height-heading-one: 90%;
  --font-line-height-heading-one-alt: 112%;
  --font-line-height-heading-two: 100%;
  --font-line-height-heading-two-alt: 100%;
  --font-line-height-heading-three: 100%;
  --font-line-height-heading-four: 100%;
  --font-line-height-body-jumbo: 130%;
  --font-line-height-body-x-large: 130%;
  --font-line-height-body-large: 140%;
  --font-line-height-body-medium: 144%;
  --font-line-height-body-small: 148%;
  --font-line-height-body-x-small: 148%;
  --font-line-height-label-x-large: 132%;
  --font-line-height-label-large: 130%;
  --font-line-height-label-medium: 140%;
  --font-line-height-label-small: 140%;
  --font-line-height-label-peewee: 140%;
}

@media (min-width: 768px) {
  :root {
    --font-size-heading-one: 100px;
    --font-size-heading-one-alt: 40px;
    --font-size-heading-two: 52px;
    --font-size-heading-two-alt: 40px;
    --font-size-heading-three: 44px;
    --font-size-heading-four: 32px;
    --font-size-heading-five: 28px;
    --font-size-heading-six: 24px;
    --font-size-body-jumbo: 40px;
    --font-size-body-x-large: 32px;
    --font-size-body-large: 24px;
    --font-size-body-medium: 18px;
    --font-size-label-x-large: 40px;
    --font-size-label-large: 28px;
  }
}
@media (min-width: 1024px) {
  :root {
    --font-size-heading-one: 132px;
    --font-size-heading-one-alt: 52px;
    --font-size-heading-two: 64px;
    --font-size-heading-two-alt: 40px;
    --font-size-heading-three: 52px;
    --font-size-heading-four: 48px;
    --font-size-heading-five: 36px;
    --font-size-heading-six: 32px;
  }
}
@media (min-width: 1400px) {
  :root {
    --font-size-heading-one: 176px;
    --font-size-heading-two: 96px;
    --font-size-heading-three: 76px;
    --font-size-heading-four: 52px;
    --font-size-heading-five: 48px;
    --font-size-heading-six: 44px;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
