/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Settings - Breakpoints
 * - 01 - Mapping
 */
/*------------------------------------*\
  01 - Mapping
\*------------------------------------*/
/**
 * Mixins - Breakpoints
 * - 01 - Breakpoints
 */
/*------------------------------------*\
  01 - Breakpoints
\*------------------------------------*/
@custom-selector :--heading h1, h2, h3, h4, h5;
h1,
h2,
h3,
h4,
h5,
h6 {
  margin-bottom: 0;
  color: var(--color-text-heading);
  font-family: var(--font-family-heading);
}
h1 > a,
h2 > a,
h3 > a,
h4 > a,
h5 > a,
h6 > a {
  text-decoration: none;
}
h1 + p,
h2 + p,
h3 + p,
h4 + p,
h5 + p,
h6 + p {
  margin-top: 12px;
}
h1:first-child,
h2:first-child,
h3:first-child,
h4:first-child,
h5:first-child,
h6:first-child {
  margin-top: 0;
}

h1 {
  margin: 0;
  font-weight: var(--font-weight-medium);
  font-family: var(--font-family-heading);
  font-size: var(--font-size-heading-one);
  line-height: var(--font-line-height-heading-one);
}
@media (max-width: 767.98px) {
  h1 {
    font-size: 3rem;
  }
}

h2 {
  margin-top: 48px;
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-heading);
  font-size: var(--font-size-heading-two);
  line-height: var(--font-line-height-heading-two);
}

h3 {
  margin-top: 48px;
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-heading);
  font-size: var(--font-size-heading-three);
  line-height: var(--font-line-height-heading-three);
}

h4 {
  margin-top: 48px;
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-heading);
  font-size: var(--font-size-heading-four);
  line-height: var(--font-line-height-heading-four);
}

h5 {
  margin-top: 48px;
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-heading);
  font-size: var(--font-size-heading-five);
}

h6 {
  margin-top: 48px;
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-heading);
  font-size: var(--font-size-heading-six);
}

hr {
  border: 0;
  border-bottom: 2px solid var(--color-surf--grey);
}

a {
  color: var(--color-surf--forest);
  font-weight: var(--font-weight-bold);
}
a:hover, a:focus, a:active {
  color: var(--color-surf--black);
}

p:not([class]) > a:not([class]),
li:not([class]) > a:not([class]) {
  text-decoration: underline;
}
p:not([class]) > a:not([class]):hover, p:not([class]) > a:not([class]):focus, p:not([class]) > a:not([class]):active,
li:not([class]) > a:not([class]):hover,
li:not([class]) > a:not([class]):focus,
li:not([class]) > a:not([class]):active {
  color: var(--color-link-hover);
  text-decoration: none;
}

strong,
b {
  font-weight: var(--font-weight-bold);
}

p,
li {
  margin: 15px 0;
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-body);
  font-size: var(--font-size-body-medium);
  line-height: var(--font-line-height-body-medium);
}

blockquote:not([class]) {
  margin: 2rem 0;
}
blockquote:not([class]) p {
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-heading);
  font-size: var(--font-size-heading-two);
  line-height: var(--font-line-height-heading-two);
}
blockquote:not([class]) > p:first-child {
  margin-top: 0;
}
blockquote:not([class]) > p:last-child {
  margin-bottom: 0;
}

.field--name-field-text:before, .field--name-field-text:after {
  content: " ";
  display: table;
}
.field--name-field-text:after {
  clear: both;
}
.field--name-field-text p.intro-paragraph {
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-body);
  font-size: var(--font-size-body-x-large);
  line-height: var(--font-line-height-body-x-large);
}
.field--name-field-text p.large-paragraph {
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-body);
  font-size: var(--font-size-body-large);
  line-height: var(--font-line-height-body-large);
}
.field--name-field-text p a:not([class]) {
  color: var(--color-surf--forest);
  font-weight: var(--font-weight-bold);
}
.field--name-field-text p a:not([class]):hover {
  color: var(--color-surf--forest);
}
@media (min-width: 768px) {
  .field--name-field-text img[data-align=right] {
    float: right;
    margin: 0 0 0.625rem 0.625rem;
  }
}
@media (min-width: 768px) {
  .field--name-field-text img[data-align=center] {
    margin: 0 auto;
    display: block;
  }
}
.field--name-field-text table {
  border-collapse: collapse;
  border: none;
}
.field--name-field-text thead th {
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-body);
  font-size: var(--font-size-body-large);
  line-height: var(--font-line-height-body-large);
  border: none;
  color: var(--color-surf--black);
  font-weight: var(--font-weight-bold);
  padding: 0.75rem 1.25rem;
}
.field--name-field-text thead td {
  border: none;
}
.field--name-field-text tr {
  border-top: 0.0625rem solid var(--color-surf--grey);
}
.field--name-field-text tbody > tr:first-child {
  border-top: 0.0625rem solid var(--color-surf--grey);
}
.field--name-field-text tbody > tr:last-child {
  border-bottom: 0.0625rem solid var(--color-surf--grey);
}
.field--name-field-text tr:first-child {
  border-top: none;
}
.field--name-field-text td {
  border: none !important;
}
.field--name-field-text td {
  padding: 0.75rem 1.25rem;
}
.field--name-field-text tbody td {
  color: var(--color-surf--black);
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-body);
  font-size: var(--font-size-body-medium);
  line-height: var(--font-line-height-body-medium);
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
