/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Settings - Breakpoints
 * - 01 - Mapping
 */
/*------------------------------------*\
  01 - Mapping
\*------------------------------------*/
/**
 * Mixins - Breakpoints
 * - 01 - Breakpoints
 */
/*------------------------------------*\
  01 - Breakpoints
\*------------------------------------*/
.layout > .l--inner-wrapper {
  z-index: 1;
  position: relative;
}
.layout.l--layout-twocolumn-halves .l__main {
  display: grid;
  row-gap: 2rem;
}
@media (min-width: 768px) {
  .layout.l--layout-twocolumn-halves .l__main {
    column-gap: 1.25rem;
    grid-template-columns: 0.5fr 0.5fr;
  }
}
@media (min-width: 1024px) {
  .layout.l--layout-twocolumn-halves .l__main {
    column-gap: 2.5rem;
  }
}
@media (min-width: 1400px) {
  .layout.l--layout-twocolumn-halves .l__main {
    column-gap: 3.75rem;
  }
}
.layout.l--layout-threecolumn-thirds .l__main {
  display: grid;
  row-gap: 2rem;
}
@media (min-width: 768px) {
  .layout.l--layout-threecolumn-thirds .l__main {
    column-gap: 1.25rem;
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
}
@media (min-width: 1024px) {
  .layout.l--layout-threecolumn-thirds .l__main {
    column-gap: 2.5rem;
  }
}
@media (min-width: 1400px) {
  .layout.l--layout-threecolumn-thirds .l__main {
    column-gap: 3.75rem;
  }
}
.layout.l--layout-twocolumn-onethird-twothirds .l__main {
  display: grid;
  row-gap: 2rem;
}
@media (min-width: 768px) {
  .layout.l--layout-twocolumn-onethird-twothirds .l__main {
    column-gap: 1.25rem;
    grid-template-columns: 0.4fr 0.6fr;
  }
}
@media (min-width: 1024px) {
  .layout.l--layout-twocolumn-onethird-twothirds .l__main {
    column-gap: 2.5rem;
  }
}
@media (min-width: 1400px) {
  .layout.l--layout-twocolumn-onethird-twothirds .l__main {
    column-gap: 3.75rem;
  }
}
.layout.l--layout-twocolumn-twothirds-onethird .l__main {
  display: grid;
}
@media (min-width: 768px) {
  .layout.l--layout-twocolumn-twothirds-onethird .l__main {
    column-gap: 1.25rem;
    grid-template-columns: 0.6fr 0.4fr;
  }
}
@media (min-width: 1024px) {
  .layout.l--layout-twocolumn-twothirds-onethird .l__main {
    column-gap: 2.5rem;
  }
}
@media (min-width: 1400px) {
  .layout.l--layout-twocolumn-twothirds-onethird .l__main {
    column-gap: 3.75rem;
  }
}
.layout.l-width--full {
  width: 100% !important;
  max-width: 100% !important;
}
.layout.l-width--full > .l--inner-wrapper {
  width: 100%;
}
@media (min-width: 1400px) {
  .layout.l-width--full > .l--inner-wrapper {
    margin-left: 1.25rem;
    width: calc(100% - 1.25rem);
  }
}
@media (min-width: 768px) {
  .layout.l-width--medium {
    column-gap: 1.25rem;
    grid-template-columns: 0.5fr 0.5fr;
  }
}
@media (min-width: 1024px) {
  .layout.l-width--medium {
    column-gap: 2.5rem;
  }
}
@media (min-width: 1400px) {
  .layout.l-width--medium {
    column-gap: 3.75rem;
  }
}
.layout.l-width--medium > .l--inner-wrapper {
  max-width: 86.25rem;
}
.layout.l-width--narrow > .l--inner-wrapper {
  max-width: 48.75rem;
  margin-left: auto;
  margin-right: auto;
}

.c-layout > .c-layout--inner-wrapper {
  z-index: 1;
  position: relative;
}
.c-layout .c-layout--main {
  margin: 0;
  padding: 0;
}
.c-layout .c-layout--region {
  display: block;
  margin: 0;
}
.c-layout .c-layout--region > * {
  height: 100%;
}
.c-layout.c-layout--layout-onecolumn .c-layout--main {
  display: grid;
  row-gap: 2rem;
}
@media (min-width: 768px) {
  .c-layout.c-layout--layout-onecolumn .c-layout--main {
    column-gap: 1.25rem;
    grid-template-columns: 1fr;
  }
}
@media (min-width: 1024px) {
  .c-layout.c-layout--layout-onecolumn .c-layout--main {
    column-gap: 2.5rem;
  }
}
@media (min-width: 1400px) {
  .c-layout.c-layout--layout-onecolumn .c-layout--main {
    column-gap: 3.75rem;
  }
}
.c-layout.c-layout--layout-twocolumn-halves .c-layout--main {
  display: grid;
  row-gap: 2rem;
}
@media (min-width: 768px) {
  .c-layout.c-layout--layout-twocolumn-halves .c-layout--main {
    column-gap: 2rem;
    grid-template-columns: 0.5fr 0.5fr;
  }
}
@media (min-width: 1024px) {
  .c-layout.c-layout--layout-twocolumn-halves .c-layout--main {
    column-gap: 2.5rem;
  }
}
@media (min-width: 1400px) {
  .c-layout.c-layout--layout-twocolumn-halves .c-layout--main {
    column-gap: 3.75rem;
  }
}
.c-layout.c-layout--layout-twocolumn-onethird-twothirds .c-layout--main {
  display: grid;
  row-gap: 2rem;
}
@media (min-width: 768px) {
  .c-layout.c-layout--layout-twocolumn-onethird-twothirds .c-layout--main {
    column-gap: 1.25rem;
    grid-template-columns: 0.4fr 0.6fr;
  }
}
@media (min-width: 1024px) {
  .c-layout.c-layout--layout-twocolumn-onethird-twothirds .c-layout--main {
    column-gap: 2.5rem;
  }
}
@media (min-width: 1400px) {
  .c-layout.c-layout--layout-twocolumn-onethird-twothirds .c-layout--main {
    column-gap: 3.75rem;
  }
}
.c-layout.c-layout--layout-twocolumn-twothirds-onethird .c-layout--main {
  display: grid;
}
@media (min-width: 768px) {
  .c-layout.c-layout--layout-twocolumn-twothirds-onethird .c-layout--main {
    column-gap: 1.25rem;
    grid-template-columns: 0.6fr 0.4fr;
  }
}
@media (min-width: 1024px) {
  .c-layout.c-layout--layout-twocolumn-twothirds-onethird .c-layout--main {
    column-gap: 2.5rem;
  }
}
@media (min-width: 1400px) {
  .c-layout.c-layout--layout-twocolumn-twothirds-onethird .c-layout--main {
    column-gap: 3.75rem;
  }
}
.c-layout.c-layout--layout-threecolumn-thirds .c-layout--main {
  display: grid;
  gap: 2rem;
}
@media (min-width: 768px) {
  .c-layout.c-layout--layout-threecolumn-thirds .c-layout--main {
    gap: 2rem;
  }
}
@media (min-width: 1024px) {
  .c-layout.c-layout--layout-threecolumn-thirds .c-layout--main {
    gap: 2.5rem;
  }
}
@media (min-width: 1400px) {
  .c-layout.c-layout--layout-threecolumn-thirds .c-layout--main {
    grid-template-columns: repeat(3, minmax(0, 1fr));
    gap: 3.75rem;
  }
}
@media (min-width: 768px) {
  .c-layout.c-layout--layout-threecolumn-thirds .simple {
    gap: 2rem;
    grid-template-columns: 0.5fr 0.5fr;
  }
}
@media (min-width: 1024px) {
  .c-layout.c-layout--layout-threecolumn-thirds .simple {
    gap: 2.5rem;
    grid-template-columns: 0.5fr 0.5fr;
  }
}
@media (min-width: 1400px) {
  .c-layout.c-layout--layout-threecolumn-thirds .simple {
    grid-template-columns: repeat(3, minmax(0, 1fr));
    gap: 3.75rem;
  }
}

.l-new-constrained {
  width: 100%;
}
@media (min-width: 1400px) {
  .l-new-constrained {
    margin-left: 1.25rem;
    width: calc(100% - 1.25rem);
  }
}

.l--bottom-spacing {
  margin-bottom: 2rem;
}
@media (min-width: 768px) {
  .l--bottom-spacing {
    margin-bottom: 3rem;
  }
}
@media (min-width: 1024px) {
  .l--bottom-spacing {
    margin-bottom: 3.75rem;
  }
}
@media (min-width: 1400px) {
  .l--bottom-spacing {
    margin-bottom: 5rem;
  }
}

.field--name-field-p-content > .field__item:last-child .cl-component {
  margin-bottom: 0 !important;
}