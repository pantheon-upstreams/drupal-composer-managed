/*
 * @file
 * Provides grid styles for view plugin.
 */
/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Settings - Breakpoints
 * - 01 - Mapping
 */
/*------------------------------------*\
  01 - Mapping
\*------------------------------------*/
/**
 * Mixins - Breakpoints
 * - 01 - Breakpoints
 */
/*------------------------------------*\
  01 - Breakpoints
\*------------------------------------*/
.l-grid .l__inner > * + * {
  margin-top: var(--space-gap-y);
}

@media (min-width: 600px) {
  .l-grid .l__inner {
    display: flex;
    flex-wrap: wrap;
    margin: -1rem -48px;
    column-gap: var(--space-gap-x);
    display: grid;
    row-gap: var(--space-gap-y);
  }
  .l-grid.l-grid--2 .l__inner,
  .l-grid.l-grid--4 .l__inner {
    grid-template-columns: repeat(auto-fit, minmax(35%, 1fr));
  }
  .l-grid.l-grid--2 .l__inner > .l__item,
  .l-grid.l-grid--4 .l__inner > .l__item {
    flex: none;
    width: calc((100% - 8rem) / 2);
    margin: 1rem 2rem;
  }
  .l-grid .l__inner > .l__item:not(:last-child) {
    margin-bottom: 0;
  }
  @supports (display: grid) {
    .l-grid .l__inner {
      margin: 0 !important;
    }
    .l-grid .l__inner > .l__item {
      margin: 0 !important;
      width: auto !important;
    }
  }
}
@media (min-width: 990px) {
  .l-grid .l__inner {
    --space-gap-x: 60px;
    --space-gap-y: 60px;
  }
  .l-grid.l-grid--2 .l__inner {
    grid-template-columns: repeat(auto-fit, minmax(35%, 1fr));
  }
  .l-grid.l-grid--3 .l__inner {
    grid-template-columns: repeat(auto-fit, minmax(25%, 1fr));
  }
  .l-grid.l-grid--3 .l__inner > .l__item {
    width: calc((100% - 12rem) / 3);
  }
  .l-grid.l-grid--4 .l__inner {
    grid-template-columns: repeat(auto-fit, minmax(10em, 1fr));
  }
  .l-grid.l-grid--4 .l__inner > .l__item {
    width: calc((100% - 16rem) / 4);
  }
  .l-grid .l__inner > .l__item:not(:last-child) {
    margin-bottom: 0;
  }
}
@media (min-width: 1400px) {
  .l-grid .l__inner {
    --space-gap-x: 75px;
    --space-gap-y: 75px;
  }
}
.l-teaser-grid ul.item-list {
  margin: 0;
  padding: 0;
  display: grid;
  row-gap: 2rem;
}
@media (min-width: 768px) {
  .l-teaser-grid ul.item-list {
    row-gap: 3rem;
  }
}
@media (min-width: 1024px) {
  .l-teaser-grid ul.item-list {
    row-gap: 3.75rem;
  }
}
.l-teaser-grid ul.item-list .item-row {
  display: block;
  margin: 0;
  padding: 0;
}

.l-teaser-grid__wrapper {
  margin-top: 3rem;
}
@media (min-width: 768px) {
  .l-teaser-grid__wrapper {
    margin-top: 3.75rem;
  }
}
@media (min-width: 1024px) {
  .l-teaser-grid__wrapper {
    margin-top: 5rem;
  }
}
.l-teaser-grid__wrapper hr.left-hook-divider {
  margin-bottom: 3rem;
}
@media (min-width: 768px) {
  .l-teaser-grid__wrapper hr.left-hook-divider {
    margin-bottom: 3.75rem;
  }
}
@media (min-width: 1024px) {
  .l-teaser-grid__wrapper hr.left-hook-divider {
    margin-bottom: 4.25rem;
  }
}
.l-teaser-grid__wrapper .l-teaser-grid__title {
  margin: 0 0 2rem 0;
}
@media (min-width: 768px) {
  .l-teaser-grid__wrapper .l-teaser-grid__title {
    margin: 0 0 3rem 0;
  }
}
@media (min-width: 1024px) {
  .l-teaser-grid__wrapper .l-teaser-grid__title {
    margin: 0 0 4.25rem 0;
  }
}

@media (min-width: 1400px) {
  .l-teaser-grid:not(.l-teaser-grid__length-1).l-teaser-grid__length-2 ul.item-list {
    column-gap: 3.75rem;
    grid-template-columns: repeat(2, 1fr);
  }
}
@media (min-width: 1400px) {
  .l-teaser-grid:not(.l-teaser-grid__length-1).l-teaser-grid__length-3 ul.item-list {
    column-gap: 3.75rem;
    grid-template-columns: repeat(3, 1fr);
  }
}
@media (min-width: 1400px) {
  .l-teaser-grid:not(.l-teaser-grid__length-1) ul.item-list.l-teaser-grid__length-2 {
    column-gap: 3.75rem;
    grid-template-columns: repeat(2, 1fr);
  }
}
@media (min-width: 1400px) {
  .l-teaser-grid:not(.l-teaser-grid__length-1) ul.item-list.l-teaser-grid__length-3 {
    column-gap: 3.75rem;
    grid-template-columns: repeat(3, 1fr);
  }
}
@media (min-width: 768px) and (max-width: 1023.98px) {
  .l-teaser-grid:not(.l-teaser-grid__length-1) ul.item-list .c-teaser.c-teaser--column-stack {
    display: grid;
    grid-template-columns: 13rem 1fr;
    column-gap: 1.25rem;
  }
}
@media (min-width: 1024px) and (max-width: 1399.98px) {
  .l-teaser-grid:not(.l-teaser-grid__length-1) ul.item-list .c-teaser.c-teaser--column-stack {
    display: grid;
    grid-template-columns: 18.3125rem 1fr;
    column-gap: 2.5rem;
  }
}

.l-teaser-view-grid ul.item-list {
  margin: 0;
  padding: 0;
  display: grid;
  gap: 2rem;
  grid-template-columns: repeat(1, 1fr);
}
@media (min-width: 768px) {
  .l-teaser-view-grid ul.item-list {
    gap: 3rem;
    grid-template-columns: repeat(2, 1fr);
  }
}
@media (min-width: 1024px) {
  .l-teaser-view-grid ul.item-list {
    gap: 3.75rem;
    grid-template-columns: repeat(3, 1fr);
  }
}
.l-teaser-view-grid ul.item-list .item-row {
  display: block;
  margin: 0;
  padding: 0;
}
.l-teaser-view-grid ul.item-list .item-row .cl-component {
  height: 100%;
}

.l-teaser-view-grid-list ul.item-list {
  margin: 0;
  padding: 0;
  display: grid;
  gap: 2rem;
  grid-template-columns: repeat(1, 1fr);
}
@media (min-width: 768px) {
  .l-teaser-view-grid-list ul.item-list {
    gap: 3rem;
  }
}
@media (min-width: 1024px) {
  .l-teaser-view-grid-list ul.item-list {
    gap: 3.75rem;
  }
}
.l-teaser-view-grid-list ul.item-list .item-row {
  display: block;
  margin: 0;
  padding: 0 0 2rem 0;
  position: relative;
}
@media (min-width: 768px) {
  .l-teaser-view-grid-list ul.item-list .item-row {
    padding: 0 0 3rem 0;
  }
}
@media (min-width: 1024px) {
  .l-teaser-view-grid-list ul.item-list .item-row {
    padding: 0 0 3.75rem 0;
  }
}
.l-teaser-view-grid-list ul.item-list .item-row .cl-component {
  height: 100%;
}
.l-teaser-view-grid-list ul.item-list .item-row:not(:last-child):after {
  content: "";
  background: var(--color-surf--grey);
  height: 0.0625rem;
  width: 100%;
  position: absolute;
  right: 0;
  bottom: 0;
  display: block;
}