/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Settings - Breakpoints
 * - 01 - Mapping
 */
/*------------------------------------*\
  01 - Mapping
\*------------------------------------*/
/**
 * Mixins - Breakpoints
 * - 01 - Breakpoints
 */
/*------------------------------------*\
  01 - Breakpoints
\*------------------------------------*/
@media (max-width: 1023.98px) {
  .header-search-form {
    margin: 24px 15px;
    width: 100%;
  }
  .header-search-form form {
    display: -webkit-box;
    display: flex;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
            flex-flow: row nowrap;
    -webkit-box-align: center;
            align-items: center;
    border: 1px solid #fff;
    gap: 6px;
    height: 55px;
    padding: 12px;
    width: 100%;
  }
  .header-search-form form:focus, .header-search-form form[focus-within] {
    border: 2px solid #fff;
  }
  .header-search-form form:focus, .header-search-form form:focus-within {
    border: 2px solid #fff;
  }
  .header-search-form form .form-actions {
    margin: 0;
  }
  .header-search-form form .form-actions .form-submit {
    --size: 28px;
    background-color: transparent;
    background-image: url(../../../../images/icons/ui-icon-search--white.svg);
    background-repeat: no-repeat;
    background-position: center;
    border: none;
    height: var(--size);
    padding: 0;
    position: relative;
    text-indent: var(--size);
    width: var(--size);
  }
  .header-search-form form .form-item {
    margin: 0;
    width: 100%;
  }
  .header-search-form form .form-item input {
    background: transparent;
    border: 0;
    margin: 0;
    padding: 0;
    width: 100%;
    color: #fff;
    font-family: var(--font-family-sans);
    font-weight: var(--font-weight-regular);
    font-size: 18px;
    line-height: 144%;
  }
  .header-search-form form .form-item input::-webkit-input-placeholder {
    color: #fff;
    font-style: italic;
  }
  .header-search-form form .form-item input::-moz-placeholder {
    color: #fff;
    font-style: italic;
    opacity: 1;
  }
  .header-search-form form .form-item input:-ms-input-placeholder {
    color: #fff;
    font-style: italic;
    opacity: 1;
  }
  .header-search-form form .form-item input::-ms-input-placeholder {
    color: #fff;
    font-style: italic;
    opacity: 1;
  }
  .header-search-form form .form-item input::placeholder {
    color: #fff;
    font-style: italic;
    opacity: 1;
  }
  .header-search-form form .form-item input::-webkit-search-cancel-button {
    display: none;
  }
}
@media (min-width: 1024px) {
  .header-search-form {
    background: var(--color-surf--forest);
    height: 70px;
    width: auto;
    position: relative;
  }
  .header-search-form form {
    -webkit-box-align: center;
            align-items: center;
    display: -webkit-inline-box;
    display: inline-flex;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
            flex-flow: row nowrap;
    height: 100%;
    overflow: hidden;
    margin: 0;
    padding: 0;
    position: relative;
    width: 120px;
    -webkit-transition: width 1s cubic-bezier(0.1, 0.1, 0.1, 1);
    -o-transition: width 1s cubic-bezier(0.1, 0.1, 0.1, 1);
    transition: width 1s cubic-bezier(0.1, 0.1, 0.1, 1);
  }
  .header-search-form:hover .form-actions:before {
    text-decoration: underline;
  }
  .header-search-form .form-item input {
    color: #fff;
    font-family: var(--font-family-sans);
    font-weight: var(--font-weight-regular);
    font-size: 18px;
    line-height: 144%;
  }
  .header-search-form .form-item label {
    color: #fff;
  }
  .header-search-form .form-item input.form-search {
    background: transparent;
    border: 0;
    border-bottom: 2px solid #fff;
    padding: 0.25em 1.25em 0.25em 0.5em;
    -webkit-box-flex: 1;
            flex-grow: 1;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    margin: 0;
    opacity: 0;
    outline: 0;
    z-index: 2;
    width: 100%;
    cursor: pointer;
    background-color: transparent;
    background-image: url(../../../../images/icons/ui-icon-search--white.svg);
    background-repeat: no-repeat;
    background-position: right center;
    background-size: 20px;
  }
  .header-search-form .form-item input.form-search::-webkit-input-placeholder {
    color: #fff;
    font-style: italic;
  }
  .header-search-form .form-item input.form-search::-moz-placeholder {
    color: #fff;
    font-style: italic;
    opacity: 1;
  }
  .header-search-form .form-item input.form-search:-ms-input-placeholder {
    color: #fff;
    font-style: italic;
    opacity: 1;
  }
  .header-search-form .form-item input.form-search::-ms-input-placeholder {
    color: #fff;
    font-style: italic;
    opacity: 1;
  }
  .header-search-form .form-item input.form-search::placeholder {
    color: #fff;
    font-style: italic;
    opacity: 1;
  }
  .header-search-form .form-item input.form-search::-webkit-search-cancel-button {
    display: none;
  }
  .header-search-form .form-actions {
    -webkit-box-align: center;
            align-items: center;
    color: #fff;
    display: -webkit-inline-box;
    display: inline-flex;
    font-family: var(--font-family-condensed);
    font-weight: 700;
    font-size: 22px;
    height: 100%;
    letter-spacing: 1.8px;
    line-height: 140%;
    margin: 0;
    text-transform: uppercase;
  }
  .header-search-form .form-actions::before {
    -webkit-box-align: center;
            align-items: center;
    content: "Search";
    display: -webkit-inline-box;
    display: inline-flex;
    width: -webkit-fit-content;
    width: -moz-fit-content;
    width: fit-content;
  }
  .header-search-form .form-actions input.form-submit {
    --size: 31px;
    background-color: transparent;
    background-image: url(../../../../images/icons/ui-icon-search--white.svg);
    background-repeat: no-repeat;
    background-position: center;
    background-size: 20px;
    border: none;
    color: #fff;
    height: var(--size);
    padding: 0;
    position: relative;
    text-indent: var(--size);
    width: var(--size);
  }
  .header-search-form #search-api-form[focus-within] {
    width: 300px;
  }
  .header-search-form #search-api-form:focus-within {
    width: 300px;
  }
  .header-search-form #search-api-form[focus-within] input.form-search {
    opacity: 1;
    z-index: auto;
    z-index: initial;
    cursor: auto;
    cursor: initial;
    height: 31px;
    margin-top: 16px;
    width: 100%;
  }
  .header-search-form #search-api-form[focus-within] input.form-search {
    opacity: 1;
    z-index: auto;
    z-index: initial;
    cursor: auto;
    cursor: initial;
    height: 31px;
    margin-top: 16px;
    width: 100%;
  }
  .header-search-form #search-api-form:focus-within input.form-search {
    opacity: 1;
    z-index: auto;
    z-index: initial;
    cursor: auto;
    cursor: initial;
    height: 31px;
    margin-top: 16px;
    width: 100%;
  }
  .header-search-form #search-api-form[focus-within] .form-actions:before {
    display: none;
  }
  .header-search-form #search-api-form:focus-within .form-actions:before {
    display: none;
  }
  .header-search-form #search-api-form[focus-within] input.form-submit {
    background: none;
    border: 0;
    position: absolute;
    right: 0;
  }
  .header-search-form #search-api-form:focus-within input.form-submit {
    background: none;
    border: 0;
    position: absolute;
    right: 0;
  }
  .header-search-form #search-api-form[focus-within] input.form-submit:hover {
    cursor: pointer;
  }
  .header-search-form #search-api-form:focus-within input.form-submit:hover {
    cursor: pointer;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
