{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# File Title / Description #}
{% set resource_file_title = content.field_file.0["#description"] %}

{# File URI #}
{% set resource_file_url = content.field_file.0["#file"].uri.value|file_url %}

{# File Mimetype #}
{% set orig_mimetype = content.field_file.0["#file"].filemime.value %}
{% set parts_mimetype = orig_mimetype|split('/') %}
{% set resource_file_mimetype = parts_mimetype|last %}

{# File Size #}
{% set file_size_in_bytes = content.field_file.0["#file"].filesize.value %}
{% set resource_file_size = (file_size_in_bytes / 1048576)|round(2) ~ " MB" %}

{% if file_size_in_bytes < 1048576 %}
  {% set resource_file_size = (file_size_in_bytes / 1024)|round(2) ~ " KB" %}
{% endif %}

{% set classes = [
  'paragraph',
  'paragraph--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished'
] %}

{%
  set rendered_fields = [
  'field_file',
]
%}

{% embed 'surf_main:resource-file' with {
  attributes,
  resource_file_title,
  resource_file_url,
  resource_file_size,
  resource_file_mimetype,
  resource_file_attributes: create_attribute({'class': classes}),
} only %}
{% endembed %}

{{ content|without(rendered_fields) }}