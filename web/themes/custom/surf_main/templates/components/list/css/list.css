/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Settings - Breakpoints
 * - 01 - Mapping
 */
/*------------------------------------*\
  01 - Mapping
\*------------------------------------*/
/**
 * Mixins - Breakpoints
 * - 01 - Breakpoints
 */
/*------------------------------------*\
  01 - Breakpoints
\*------------------------------------*/
.c-list > .c-list--inner-wrapper {
  z-index: 1;
  position: relative;
}
.c-list > .c-list--inner-wrapper .c-list__items {
  margin: 0;
  padding: 0;
}
.c-list > .c-list--inner-wrapper .c-list__item {
  display: block;
  margin: 0;
}
.c-list.c-list--1-columns.c-list--default-column .c-list__items, .c-list.c-list--1-columns.c-list--simple-column .c-list__items {
  display: grid;
  grid-row-gap: 2rem;
  row-gap: 2rem;
}
@media (min-width: 768px) {
  .c-list.c-list--1-columns.c-list--default-column .c-list__items, .c-list.c-list--1-columns.c-list--simple-column .c-list__items {
    -webkit-column-gap: 1.25rem;
       -moz-column-gap: 1.25rem;
            column-gap: 1.25rem;
    grid-template-columns: 1fr;
  }
}
@media (min-width: 1024px) {
  .c-list.c-list--1-columns.c-list--default-column .c-list__items, .c-list.c-list--1-columns.c-list--simple-column .c-list__items {
    -webkit-column-gap: 2.5rem;
       -moz-column-gap: 2.5rem;
            column-gap: 2.5rem;
  }
}
@media (min-width: 1400px) {
  .c-list.c-list--1-columns.c-list--default-column .c-list__items, .c-list.c-list--1-columns.c-list--simple-column .c-list__items {
    -webkit-column-gap: 3.75rem;
       -moz-column-gap: 3.75rem;
            column-gap: 3.75rem;
  }
}
.c-list.c-list--2-columns.c-list--default-column .c-list__items, .c-list.c-list--2-columns.c-list--simple-column .c-list__items {
  display: grid;
  grid-row-gap: 2rem;
  row-gap: 2rem;
}
@media (min-width: 768px) {
  .c-list.c-list--2-columns.c-list--default-column .c-list__items, .c-list.c-list--2-columns.c-list--simple-column .c-list__items {
    -webkit-column-gap: 2rem;
       -moz-column-gap: 2rem;
            column-gap: 2rem;
    grid-template-columns: 0.5fr 0.5fr;
  }
  .c-list.c-list--2-columns.c-list--default-column .c-list__items > .c-list__item > *, .c-list.c-list--2-columns.c-list--simple-column .c-list__items > .c-list__item > * {
    height: 100%;
  }
}
@media (min-width: 1024px) {
  .c-list.c-list--2-columns.c-list--default-column .c-list__items, .c-list.c-list--2-columns.c-list--simple-column .c-list__items {
    -webkit-column-gap: 2.5rem;
       -moz-column-gap: 2.5rem;
            column-gap: 2.5rem;
  }
}
@media (min-width: 1400px) {
  .c-list.c-list--2-columns.c-list--default-column .c-list__items, .c-list.c-list--2-columns.c-list--simple-column .c-list__items {
    -webkit-column-gap: 3.75rem;
       -moz-column-gap: 3.75rem;
            column-gap: 3.75rem;
  }
}
.c-list.c-list--3-columns.c-list--default-column .c-list__items {
  display: grid;
  grid-gap: 2rem;
  gap: 2rem;
}
@media (min-width: 768px) {
  .c-list.c-list--3-columns.c-list--default-column .c-list__items {
    gap: 2rem;
  }
}
@media (min-width: 1024px) {
  .c-list.c-list--3-columns.c-list--default-column .c-list__items {
    gap: 2.5rem;
  }
}
@media (min-width: 1400px) {
  .c-list.c-list--3-columns.c-list--default-column .c-list__items {
    grid-template-columns: repeat(3, minmax(0, 1fr));
    gap: 3.75rem;
  }
  .c-list.c-list--3-columns.c-list--default-column .c-list__items > .c-list__item > * {
    height: 100%;
  }
}
@media (min-width: 768px) {
  .c-list.c-list--3-columns.c-list--simple-column .c-list__items {
    display: grid;
    grid-gap: 2rem;
    gap: 2rem;
    grid-template-columns: 0.5fr 0.5fr;
  }
  .c-list.c-list--3-columns.c-list--simple-column .c-list__items > .c-list__item > * {
    height: 100%;
  }
}
@media (min-width: 1024px) {
  .c-list.c-list--3-columns.c-list--simple-column .c-list__items {
    gap: 2.5rem;
    grid-template-columns: 0.5fr 0.5fr;
  }
}
@media (min-width: 1400px) {
  .c-list.c-list--3-columns.c-list--simple-column .c-list__items {
    grid-template-columns: repeat(3, minmax(0, 1fr));
    gap: 3.75rem;
  }
}
.c-list.c-list--vertical-list .c-list__items {
  display: grid;
  grid-template-columns: 1fr;
}
@media (min-width: 768px) {
  .c-list.c-list--vertical-list .c-list__items {
    display: grid;
  }
}
.c-list.c-list--vertical-list .c-list__items > .c-list__item {
  border-top: solid 0.125rem var(--color-surf--grey);
  padding: 2rem 0;
}
@media (min-width: 1024px) {
  .c-list.c-list--vertical-list .c-list__items > .c-list__item {
    padding: 2.5rem 0;
  }
}
.c-list.c-list--vertical-list .c-list__items > .c-list__item:last-child {
  border-bottom: solid 0.125rem var(--color-surf--grey);
}

.c-article--vertical .c-list.c-list--2-columns.c-list--default-column .c-list__items {
  grid-template-columns: 1fr;
}
@media (min-width: 768px) {
  .c-article--vertical .c-list.c-list--2-columns.c-list--default-column .c-list__items {
    grid-template-columns: 1fr;
  }
}
@media (min-width: 768px) {
  .c-article--vertical .c-list.c-list--2-columns.c-list--default-column .c-list__items {
    grid-template-columns: 0.5fr 0.5fr;
  }
}
@media (min-width: 1400px) {
  .c-article--vertical .c-list.c-list--2-columns.c-list--default-column .c-list__items {
    grid-template-columns: 1fr;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
