/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Settings - Breakpoints
 * - 01 - Mapping
 */
/*------------------------------------*\
  01 - Mapping
\*------------------------------------*/
/**
 * Mixins - Breakpoints
 * - 01 - Breakpoints
 */
/*------------------------------------*\
  01 - Breakpoints
\*------------------------------------*/
.c-press-release__header-wrapper {
  max-width: 48.75rem;
  margin: 0 auto 1.75rem auto;
}

.c-press-release__breadcrumb-list {
  margin: 0;
  padding: 0;
  display: -webkit-box;
  display: flex;
}

.c-press-release__breadcrumb-item {
  margin: 0;
  display: inline-block;
}

.c-press-release__breadcrumb-link {
  font-style: normal;
  text-transform: uppercase;
  font-family: var(--font-family-condensed);
  font-size: var(--font-size-label-peewee);
  font-weight: var(--font-weight-bold);
  letter-spacing: var(--font-letter-spacing-wide);
  line-height: var(--font-line-height-label-peewee);
  color: var(--color-surf--forest);
  font-weight: var(--font-weight-bold);
  text-decoration: underline;
  letter-spacing: 0.08em;
}
.c-press-release__breadcrumb-link:hover {
  text-decoration: none;
}

.c-press-release__date {
  font-style: normal;
  text-transform: uppercase;
  font-family: var(--font-family-condensed);
  font-size: var(--font-size-label-peewee);
  font-weight: var(--font-weight-bold);
  letter-spacing: var(--font-letter-spacing-wide);
  line-height: var(--font-line-height-label-peewee);
  color: var(--color-surf--black);
  font-weight: var(--font-weight-bold);
  letter-spacing: 0.09375rem;
  margin: 0 0 0 1.75rem;
}

.c-press-release__breadcrumbs-date-wrapper {
  display: -webkit-box;
  display: flex;
  flex-wrap: wrap;
  -webkit-box-align: center;
          align-items: center;
  margin: 0 0 1.75rem 0;
}

.c-press-release__title {
  font-weight: var(--font-weight-bold);
  font-family: var(--font-family-body);
  font-size: var(--font-size-heading-one-alt);
  letter-spacing: 0.01em;
  line-height: var(--font-line-height-heading-one-alt);
}

.c-press-release__image-wrapper {
  max-width: 67.5rem;
  margin: 0 auto 1.75rem auto;
}
.c-press-release__image-wrapper img {
  width: 100%;
}

.c-press-release__content-wrapper {
  max-width: 48.75rem;
  margin: 0 auto 1.75rem auto;
  padding: 0 0 1.75rem 0;
  border-bottom: solid 0.125rem var(--color-surf--grey);
}

.c-press-release__bottom-wrapper {
  max-width: 48.75rem;
  margin: 0 auto 5rem auto;
}

.c-press-release__author {
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-body);
  font-size: var(--font-size-body-medium);
  line-height: var(--font-line-height-body-medium);
  font-style: italic;
  margin: 0 0 1.75rem 0;
}

.c-press-release__categories {
  margin: 0 0 1rem 0;
  padding: 0;
  display: -webkit-box;
  display: flex;
  flex-wrap: wrap;
  -webkit-box-align: center;
          align-items: center;
}

.c-press-release__categories-item {
  display: inline-block;
  margin: 0 0.75rem 0.75rem 0;
}
.c-press-release__categories-item a {
  font-style: normal;
  text-transform: uppercase;
  font-family: var(--font-family-condensed);
  font-size: var(--font-size-label-peewee);
  font-weight: var(--font-weight-bold);
  letter-spacing: var(--font-letter-spacing-wide);
  line-height: var(--font-line-height-label-peewee);
  color: var(--color-surf--forest);
  padding: 0.125rem 0.5rem;
  background: var(--color-surf--cloud);
  text-decoration: none;
}
.c-press-release__categories-item a:hover {
  color: var(--color-surf--black);
  text-decoration: underline;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
