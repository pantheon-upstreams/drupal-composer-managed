/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Functions - Breakpoints
 * Breakpoint viewport sizes and media queries. Breakpoints are defined as a map of (name: minimum width), order from
 * small to large: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px). The map defined in the `$grid-breakpoints`
 * global variable is used as the `$breakpoints` argument by default.
 *
 * - 01 - Breakpoint Next
 * - 02 - Breakpoint Minimum
 * - 03 - Breakpoint Maximum
 * - 04 - Breakpoint Infix
 */
/*------------------------------------*\
  01 - Breakpoint Next
  Name of the next breakpoint, or null for the last breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  02 - Breakpoint Minimum
  Minimum breakpoint width. Null for the smallest (first) breakpoint.
\*------------------------------------*/
/*------------------------------------*\
  03 - Breakpoint Maximum
  The maximum value is reduced by 0.02px to work around the limitations of `min-` and `max-` prefixes and viewports
  with fractional widths. See https://www.w3.org/TR/mediaqueries-4/#mq-min-max. Uses 0.02px rather than 0.01px to work
  around a current rounding bug in Safari. See https://bugs.webkit.org/show_bug.cgi?id=178261
\*------------------------------------*/
/*------------------------------------*\
  04 - Breakpoint Infix
  Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front. Useful for making
  responsive utilities.
\*------------------------------------*/
/**
 * Settings - Breakpoints
 * - 01 - Mapping
 */
/*------------------------------------*\
  01 - Mapping
\*------------------------------------*/
/**
 * Mixins - Breakpoints
 * - 01 - Breakpoints
 */
/*------------------------------------*\
  01 - Breakpoints
\*------------------------------------*/
.c-resources-list {
  background: var(--color-surf--cloud);
  padding: 1.25rem 1.5rem;
}
@media (min-width: 768px) {
  .c-resources-list {
    padding: 2.5rem;
  }
}

.c-resources-list__heading {
  font-style: normal;
  text-transform: uppercase;
  font-family: var(--font-family-condensed);
  font-size: var(--font-size-label-peewee);
  font-weight: var(--font-weight-bold);
  letter-spacing: var(--font-letter-spacing-wide);
  line-height: var(--font-line-height-label-peewee);
  margin: 0;
}

.c-resources-list__items {
  margin: 1.25rem 0 0 0;
  padding: 0;
  display: grid;
  grid-template-columns: repeat(1, 1fr);
  grid-row-gap: 1.25rem;
  row-gap: 1.25rem;
  grid-column-gap: 2.75rem;
  -webkit-column-gap: 2.75rem;
     -moz-column-gap: 2.75rem;
          column-gap: 2.75rem;
}
@media (min-width: 768px) {
  .c-resources-list__items {
    grid-template-columns: repeat(2, 1fr);
  }
}

.c-resources-list__item {
  display: -webkit-box;
  display: flex;
  flex-wrap: wrap;
  margin: 0;
}
.c-resources-list__item.link {
  padding-left: 1.875rem;
  background-image: url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%20fill%3D%22none%22%3E%3Cpath%20stroke%3D%22%2300492C%22%20stroke-width%3D%221.5%22%20d%3D%22m11.6%205.733%201.572-1.571a4%204%200%200%201%205.657%205.657l-3.3%203.3a4.667%204.667%200%200%201-6.6%200%22%2F%3E%3Cpath%20stroke%3D%22%2300492C%22%20stroke-width%3D%221.5%22%20d%3D%22M10.972%2017.675%209.4%2019.247a4%204%200%201%201-5.657-5.657l3.3-3.3a4.667%204.667%200%200%201%206.6%200%22%2F%3E%3C%2Fsvg%3E");
  background-repeat: no-repeat;
  background-position: top left;
}
.c-resources-list__item.file {
  padding-left: 1.875rem;
  background-image: url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%20fill%3D%22none%22%3E%3Cpath%20stroke%3D%22%2300492C%22%20stroke-width%3D%221.5%22%20d%3D%22M4%2021.333V2.667h10.89l4.666%204.666v14H4Z%22%2F%3E%3Cpath%20stroke%3D%22%2300492C%22%20stroke-width%3D%221.5%22%20d%3D%22M14.89%202.667v4.666h4.666M6.968%2011.222h9.29M6.968%2014.333h9.29M6.968%2017.445h6.193%22%2F%3E%3C%2Fsvg%3E");
  background-repeat: no-repeat;
  background-position: top left;
}

.c-resources-list__link {
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-body);
  font-size: var(--font-size-body-small);
  line-height: var(--font-line-height-body-small);
  color: var(--color-surf--forest);
  font-weight: var(--font-weight-regular);
  text-decoration: none;
  display: inline-block;
}
.c-resources-list__link:hover {
  text-decoration: underline;
}

.c-resources-list__details-wrapper {
  display: block;
  -webkit-box-flex: 0;
          flex: none;
  width: 100%;
}

.c-resources-list__size {
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-body);
  font-size: var(--font-size-body-x-small);
  line-height: var(--font-line-height-body-x-small);
  text-transform: uppercase;
}

.c-resources-list__type {
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family-body);
  font-size: var(--font-size-body-x-small);
  line-height: var(--font-line-height-body-x-small);
  text-transform: uppercase;
}

.c-resources-list__details-wrapper.both .c-resources-list__size {
  margin: 0 0.5rem 0 0;
  padding: 0 0.625rem 0 0;
  position: relative;
}
.c-resources-list__details-wrapper.both .c-resources-list__size:after {
  content: "";
  font-weight: var(--font-weight-regular);
  background: var(--color-surf--black);
  height: 0.75rem;
  width: 0.0625rem;
  position: absolute;
  right: 0;
  top: 50%;
  -webkit-transform: translateY(-50%);
      -ms-transform: translateY(-50%);
          transform: translateY(-50%);
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
