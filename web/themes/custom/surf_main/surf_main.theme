<?php
/**
 * Theme Preprocess Functions
 *
 * - 01 - Use Statements
 * - 01 - HTML
 * - 02 - Paragraphs
 * - 03 - Theme Suggestions
 */


/*------------------------------------*\
  01 - Use Statements
\*------------------------------------*/

use Drupal\Component\Render\FormattableMarkup;




/*------------------------------------*\
  02 - HTML
\*------------------------------------*/

function surf_main_preprocess_html(&$variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $nid = $node->id();
    $variables['node_id'] = $nid;
  }
}




/*------------------------------------*\
  03 - Paragraphs
\*------------------------------------*/

function surf_main_preprocess_paragraph__embed(&$variables) {
  /** @var Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if ($paragraph->hasField('field_embed_code') && !$paragraph->get('field_embed_code')->isEmpty()) {
    $embed_value = $paragraph->get('field_embed_code')->value;
    $variables['embed_code'] = new \Drupal\Component\Render\FormattableMarkup($embed_value, []);
  }
}




/*------------------------------------*\
  04 - Theme Suggestions
\*------------------------------------*/

/**
 * Page Suggestions Alter
 * Implements hook_theme_suggestions_page_alter().
 * @param array $suggestions
 * @param array $variables
 * @return void
 */
function surf_main_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node instanceof \Drupal\node\NodeInterface) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}

/**
 * Block Theme Suggestions
 * Attempts to update the template suggestions.
 * - Implements template_theme_suggestions_HOOK_alter().
 * - @param array $suggestions
 * - @param array $variables
 * - @return void
 */
function surf_main_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Taxonomy Term Alter
 * - Implements hook_theme_suggestions_taxonomy_term_alter().
 * - @param array $suggestions - Inspector theme file name suggestions.
 * - @param array $variables - Suggestion variables.
 */
function surf_main_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  // Provide suggestion for taxonomy term templates by view mode.
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $view_mode = $variables['elements']['#view_mode'];
  $sanitized_view_mode = str_replace('.', '_', $variables['elements']['#view_mode']);
  $suggestions[] = 'taxonomy_term__' . $term->bundle();
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $view_mode;
}

/**
 * Form Alter
 * - Implements hook_theme_suggestions_form_alter().
 * - @param array $suggestions - Inspector theme file name suggestions.
 * - @param array $variables - Suggestion variables.
 */
function surf_main_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . str_replace('-','_', $variables['element']['#id']);
}
