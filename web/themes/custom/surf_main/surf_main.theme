<?php
/**
 * Theme Preprocess Functions
 *
 * - 01 - Imports
 * - 02 - Node
 * - 03 - Block
 * - 04 - Theme Suggestions
 */


/*------------------------------------*\
  01 - Imports
\*------------------------------------*/

use Drupal\block\Entity\Block;




/*------------------------------------*\
  02 - Node
\*------------------------------------*/

/**
 * Person
 * Implements template_preprocess_node()
 * @param $variables
 * @return void
 */
function surf_main_preprocess_node__person(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];

  if ($node->hasField('field_name') && !$node->get('field_name')->isEmpty()) {
    $person_name = $node->get('field_name')->getValue();
    $person_name_first_initial = substr($person_name[0]['given'], 0, 1);
    $person_name_last_initial = substr($person_name[0]['family'], 0, 1);
    $variables['person_initials'] = $person_name_first_initial . $person_name_last_initial;
  }
}




/*------------------------------------*\
  03 - Block
\*------------------------------------*/

/**
 * Block Preprocess
 * Attempts to add or edit data on all Block entities.
 * - Implements template_preprocess_block()
 * - @param $variables
 * - @return void
 */
function surf_main_preprocess_block(&$variables) {
  if (!empty($variables['elements']['content']['#block_content'])) {
    /** @var Block $block */
    $block = $variables['elements']['content']['#block_content'];
    $function = __FUNCTION__ . '_' . $block->bundle();

    // Theme suggestions update
    if (function_exists($function)) {
      $function($variables);
    }

    // Block type
    $variables['block_type'] = $block->bundle();
  }
}




/*------------------------------------*\
  04 - Theme Suggestions
\*------------------------------------*/

/**
 * Page Suggestions Alter
 * Implements hook_theme_suggestions_page_alter().
 * @param array $suggestions
 * @param array $variables
 * @return void
 */
function surf_main_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node instanceof \Drupal\node\NodeInterface) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}

/**
 * Block Theme Suggestions
 * Attempts to update the template suggestions.
 * - Implements template_theme_suggestions_HOOK_alter().
 * - @param array $suggestions
 * - @param array $variables
 * - @return void
 */
function surf_main_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Taxonomy Term Alter
 * - Implements hook_theme_suggestions_taxonomy_term_alter().
 * - @param array $suggestions - Inspector theme file name suggestions.
 * - @param array $variables - Suggestion variables.
 */
function surf_main_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  // Provide suggestion for taxonomy term templates by view mode.
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $view_mode = $variables['elements']['#view_mode'];
  $sanitized_view_mode = str_replace('.', '_', $variables['elements']['#view_mode']);
  $suggestions[] = 'taxonomy_term__' . $term->bundle();
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $view_mode;
}

/**
 * Form Alter
 * - Implements hook_theme_suggestions_form_alter().
 * - @param array $suggestions - Inspector theme file name suggestions.
 * - @param array $variables - Suggestion variables.
 */
function surf_main_theme_suggestions_form_alter(array &$suggestions, array $variables) {
    $suggestions[] = 'form__' . str_replace('-','_', $variables['element']['#id']);
}
